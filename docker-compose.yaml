version: "3.9"

services:
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: testdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    networks:
      - backend

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - backend
    volumes:
      - zookeeper_data:/opt/zookeeper-3.4.13/data

  auth-service:
    build: ./Auth_service
    ports:
      - "8085:8085"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend

  user-service:
    build: ./User_service
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend

  order-service:
    build: ./Order_service
    ports:
      - "8082:8082"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend

  payment-service:
    build: ./Payment_service
    ports:
      - "8083:8083"
    depends_on:
      - kafka
    networks:
      - backend

  notification-service:
    build: ./Notification_service
    ports:
      - "8084:8084"
    depends_on:
      - kafka
    networks:
      - backend

  analytics-service:
    build: ./Analytics_service
    ports:
      - "8086:8086"
    depends_on:
      - kafka
    networks:
      - backend

  gateway-service:
    build: ./Gateway_service
    ports:
      - "8000:8000"
    depends_on:
      - auth-service
      - user-service
      - order-service
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  zookeeper_data:
