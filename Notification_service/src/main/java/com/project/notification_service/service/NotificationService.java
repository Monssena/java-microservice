package com.project.notification_service.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.project.notification_service.model.OrderNotification;
import lombok.RequiredArgsConstructor;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class NotificationService {

    private final JavaMailSender mailSender;
    private final ObjectMapper objectMapper = new ObjectMapper();

    @KafkaListener(topics = "orders", groupId = "notification-group")
    public void consume(String message) {
        try {
            OrderNotification notif = objectMapper.readValue(message, OrderNotification.class);
            sendEmail(notif);
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
        }
    }

    private void sendEmail(OrderNotification notif) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(notif.getEmail());
        message.setSubject("üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑");
        message.setText("–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–∫–∞–∑ #" + notif.getOrder_id() + " –Ω–∞ —Ç–æ–≤–∞—Ä: " + notif.getProduct());

        mailSender.send(message);
        System.out.println("üì® Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ " + notif.getEmail());
    }
}
